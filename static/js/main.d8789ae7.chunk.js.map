{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchFiled","target","value","state","fetch","mode","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAO,SAACC,GAAD,OACpB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UACTC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,2BAEH,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHTC,G,MAAW,SAAAR,GAAK,OAGxB,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCRXM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgCHG,E,kDAjCb,aAAc,IAAD,8BACb,gBAWAH,aAAe,SAACI,GAAM,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAV3D,EAAKC,MAAM,CACTb,SAAS,GACTU,YAAY,IAJD,E,qDAOb,WAAoB,IAAD,OACjBI,MAAM,4CAA4C,CAAEC,KAAM,YACzDC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKV,SAAS,CAACT,SAASmB,S,oBAKvC,WACE,MAAkCC,KAAKP,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZW,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBACpD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDAEA,cAAC,EAAD,CAAWW,YAAY,kBACvBC,aAAegB,KAAKhB,eACpB,cAAC,EAAD,CAAUJ,SAAUqB,W,GA1BRI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d8789ae7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\nexport const Card = (props) =>(\n<div className=\"card-container\">\n    <img alt='monster' \n    src={`https://robohash.org/${props.monster.id}?set=set2size=180*180`}\n    />\n    <h1>{props.monster.name}</h1>\n    <p>{props.monster.email}</p>\n</div>\n\n)","import React from 'react';\nimport {Card} from '../card/card.component';\nimport './card-list.styles.css';\n\n\nexport const CardList = props => (\n   \n \n     <div className=\"card-list\">\n     {props.monsters.map(monster=> (\n     <Card key={monster.id} monster={monster}/>\n     ))}       \n    </div>\n\n);","import React from \"react\";\nimport \"./search-box.styles.css\";\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input\n        className=\"search\"\n        type='search'\n        placeholder={placeholder} \n        onChange={handleChange}\n            \n            \n            // e=> this.setState({searchFiled: e.target.value})}\n    />\n)","import React,{Component, component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor(){\n  super();\n  this.state={\n    monsters:[],\n    searchFiled:''\n  }\n  }\n  componentDidMount(){\n    fetch('http://jsonplaceholder.typicode.com/users',{ mode: 'no-cors'})\n    .then(response=>response.json())\n    .then(users=>this.setState({monsters:users}))\n  }\n  handleChange = (e) =>{this.setState({searchFiled: e.target.value})}\n\n  \n  render(){\n    const { monsters, searchFiled } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchFiled.toLowerCase()));\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n     \n      <SearchBox placeholder='search monsters' \n      handleChange ={this.handleChange}/>\n      <CardList monsters={filteredMonsters}></CardList>\n      \n    \n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}